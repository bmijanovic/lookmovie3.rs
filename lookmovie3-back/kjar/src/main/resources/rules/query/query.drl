package rules.query;
dialect  "mvel"
import com.ftn.sbnz.service.Entities.Events.FilmWatch;
import com.ftn.sbnz.service.Entities.Models.User;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.UUID;


query usersFavouriteGenres(UUID userId)
    $user : User( id == userId )
    $fw: ArrayList() from collect(FilmWatch(user.getId() == userId))
    $map: HashMap() from makeMapGenres($fw)
end

function HashMap makeMapGenres(ArrayList list) {
    HashMap<String, Integer> map = new HashMap();
    for(Object o : list) {
        FilmWatch fw = (FilmWatch) o;
        if(map.containsKey(fw.getFilm().getGenre())) {
            map.put(fw.getFilm().getGenre(), map.get(fw.getFilm().getGenre()) + 1);
        } else {
            map.put(fw.getFilm().getGenre(), 1);
        }
    }
    return map;
}

query usersFavouriteFilms(UUID userId)
    $user : User( id == userId )
    $fw: ArrayList() from collect(FilmWatch(user.getId() == userId))
    $map: HashMap() from makeMapFilms($fw)
end

function HashMap makeMapFilms(ArrayList list) {
    HashMap<String, Integer> map = new HashMap();
    for(Object o : list) {
        FilmWatch fw = (FilmWatch) o;
        if(map.containsKey(fw.getFilm().getName())) {
            map.put(fw.getFilm().getName(), map.get(fw.getFilm().getName()) + 1);
        } else {
            map.put(fw.getFilm().getName(), 1);
        }
    }
    return map;
}

query usersFavouriteDirectors(UUID userId)
    $user : User( id == userId )
    $fw: ArrayList() from collect(FilmWatch(user.getId() == userId))
    $map: HashMap() from makeMapDirectors($fw)
end

function HashMap makeMapDirectors(ArrayList list) {
    HashMap<String, Integer> map = new HashMap();
    for(Object o : list) {
        FilmWatch fw = (FilmWatch) o;
        String key = fw.getFilm().getDirector().getName() + " " + fw.getFilm().getDirector().getSurname();
        if(map.containsKey(key)) {
            map.put(key, map.get(key) + 1);
        } else {
            map.put(key, 1);
        }
    }
    return map;
}