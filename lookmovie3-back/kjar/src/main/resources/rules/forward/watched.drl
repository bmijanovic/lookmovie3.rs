package rules.forward;
dialect  "mvel"


import com.ftn.sbnz.service.Entities.Events.FilmWatch;
import com.ftn.sbnz.service.Entities.Models.User;
import com.ftn.sbnz.service.Entities.Models.Film;
import com.ftn.sbnz.service.Entities.Models.Director;




rule "hello FilmWatched"
no-loop
agenda-group "watched"
when
    $filmWatch : FilmWatch(isDone == false)
then
    System.out.println("Film watched");
     System.out.println(userId);

end




rule "Full Film Watched"
no-loop
agenda-group "watched"
when
    $filmWatched : FilmWatch($film : film, isDone == false)
    $user : User(id == userId)
then
    System.out.println("Full Watched Film " + $film.getName() + " by user " + $user.getUsername());
    likedFilm = $film;
    modify($user) {
        getWatchedFilms().add($film);
    }
    modify($user){
        setGotRecommendation(false);
    }
    modify($filmWatched) {
        setIsDone(true);
    }
end





rule "Added Watched Film"
no-loop
agenda-group "watched"
when
    $user : User(id == userId , $watchedFilms : watchedFilms, gotRecommendation == false)
    eval($watchedFilms.size() > 0)
    $film : Film($director: director) from $watchedFilms.get($watchedFilms.size() - 1)
then
    modify($user) {
        getLikedDirectors().add($director);
    }
end


rule "director added to liked directors"
no-loop
agenda-group "watched"
when
    $user : User(id == userId , $likedDirectors : likedDirectors, gotRecommendation == false)
    eval($likedDirectors.size() > 0)
    $director : Director() from $likedDirectors.get($likedDirectors.size() - 1)
    $film : Film(director.getId() == $director.getId(), id != likedFilm.getId())
    not(Recommendation(film == $film, userId == userId))
then
    modify($user) {
        setGotRecommendation(true);
    }
    insert(new Recommendation($film, userId));

end



